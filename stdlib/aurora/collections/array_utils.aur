// AuroraLang Standard Library - Array Utilities
// Helper functions for working with arrays

// Sum all integers in an array
// Note: Requires length parameter until arr.length is implemented
fn sum_int_array(arr: [int], length: int) -> int {
    var sum = 0
    var i = 0
    
    while i < length {
        sum = sum + arr[i]
        i = i + 1
    }
    
    return sum
}

// Find minimum value in integer array
fn min_int_array(arr: [int], length: int) -> int {
    if length == 0 {
        return 0  // Error case
    }
    
    var min_val = arr[0]
    var i = 1
    
    while i < length {
        if arr[i] < min_val {
            min_val = arr[i]
        }
        i = i + 1
    }
    
    return min_val
}

// Find maximum value in integer array
fn max_int_array(arr: [int], length: int) -> int {
    if length == 0 {
        return 0  // Error case
    }
    
    var max_val = arr[0]
    var i = 1
    
    while i < length {
        if arr[i] > max_val {
            max_val = arr[i]
        }
        i = i + 1
    }
    
    return max_val
}

// Reverse an array in place
fn reverse_int_array(arr: [int], length: int) -> void {
    var left = 0
    var right = length - 1
    
    while left < right {
        let temp = arr[left]
        arr[left] = arr[right]
        arr[right] = temp
        
        left = left + 1
        right = right - 1
    }
}

// Check if array contains a value
fn contains_int(arr: [int], length: int, value: int) -> bool {
    var i = 0
    while i < length {
        if arr[i] == value {
            return true
        }
        i = i + 1
    }
    return false
}

// Find index of first occurrence of value, returns -1 if not found
fn index_of_int(arr: [int], length: int, value: int) -> int {
    var i = 0
    while i < length {
        if arr[i] == value {
            return i
        }
        i = i + 1
    }
    return -1
}

// Count occurrences of a value in array
fn count_int(arr: [int], length: int, value: int) -> int {
    var count = 0
    var i = 0
    while i < length {
        if arr[i] == value {
            count = count + 1
        }
        i = i + 1
    }
    return count
}

// Simple bubble sort (for small arrays)
fn bubble_sort_int(arr: [int], length: int) -> void {
    var i = 0
    while i < length - 1 {
        var j = 0
        while j < length - i - 1 {
            if arr[j] > arr[j + 1] {
                let temp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = temp
            }
            j = j + 1
        }
        i = i + 1
    }
}

// Check if array is sorted
fn is_sorted_int(arr: [int], length: int) -> bool {
    var i = 0
    while i < length - 1 {
        if arr[i] > arr[i + 1] {
            return false
        }
        i = i + 1
    }
    return true
}

// Binary search in sorted array (returns index or -1)
fn binary_search_int(arr: [int], length: int, target: int) -> int {
    var left = 0
    var right = length - 1
    
    while left <= right {
        let mid = (left + right) / 2
        let mid_val = arr[mid]
        
        if mid_val == target {
            return mid
        } else {
            if mid_val < target {
                left = mid + 1
            } else {
                right = mid - 1
            }
        }
    }
    
    return -1  // Not found
}


