// AuroraLang Standard Library - Array Utilities
// Helper functions for working with arrays

// Sum all integers in an array
// Note: Requires length parameter until arr.length is implemented
fn sumIntArray(arr: [int], length: int) -> int {
    var sum = 0
    var i = 0
    
    while i < length {
        sum = sum + arr[i]
        i = i + 1
    }
    
    return sum
}

// Sum all doubles in an array
fn sumDoubleArray(arr: [double], length: int) -> double {
    var sum = 0.0
    var i = 0
    
    while i < length {
        sum = sum + arr[i]
        i = i + 1
    }
    
    return sum
}

// Calculate average of integer array
fn averageIntArray(arr: [int], length: int) -> double {
    if length == 0 {
        return 0.0
    }
    let sum = sumIntArray(arr, length)
    return sum / length
}

// Calculate average of double array
fn averageDoubleArray(arr: [double], length: int) -> double {
    if length == 0 {
        return 0.0
    }
    let sum = sumDoubleArray(arr, length)
    return sum / length
}

// Find minimum value in integer array
fn minIntArray(arr: [int], length: int) -> int {
    if length == 0 {
        return 0  // Error case
    }
    
    var minVal = arr[0]
    var i = 1
    
    while i < length {
        if arr[i] < minVal {
            minVal = arr[i]
        }
        i = i + 1
    }
    
    return minVal
}

// Find maximum value in integer array
fn maxIntArray(arr: [int], length: int) -> int {
    if length == 0 {
        return 0  // Error case
    }
    
    var maxVal = arr[0]
    var i = 1
    
    while i < length {
        if arr[i] > maxVal {
            maxVal = arr[i]
        }
        i = i + 1
    }
    
    return maxVal
}

// Find minimum value in double array
fn minDoubleArray(arr: [double], length: int) -> double {
    if length == 0 {
        return 0.0
    }
    
    var minVal = arr[0]
    var i = 1
    
    while i < length {
        if arr[i] < minVal {
            minVal = arr[i]
        }
        i = i + 1
    }
    
    return minVal
}

// Find maximum value in double array
fn maxDoubleArray(arr: [double], length: int) -> double {
    if length == 0 {
        return 0.0
    }
    
    var maxVal = arr[0]
    var i = 1
    
    while i < length {
        if arr[i] > maxVal {
            maxVal = arr[i]
        }
        i = i + 1
    }
    
    return maxVal
}

// Reverse an integer array in place
fn reverseIntArray(arr: [int], length: int) -> void {
    var left = 0
    var right = length - 1
    
    while left < right {
        let temp = arr[left]
        arr[left] = arr[right]
        arr[right] = temp
        
        left = left + 1
        right = right - 1
    }
}

// Reverse a double array in place
fn reverseDoubleArray(arr: [double], length: int) -> void {
    var left = 0
    var right = length - 1
    
    while left < right {
        let temp = arr[left]
        arr[left] = arr[right]
        arr[right] = temp
        
        left = left + 1
        right = right - 1
    }
}

// Check if array contains a value
fn containsInt(arr: [int], length: int, value: int) -> bool {
    var i = 0
    while i < length {
        if arr[i] == value {
            return true
        }
        i = i + 1
    }
    return false
}

// Check if double array contains a value (with epsilon for floating point comparison)
fn containsDouble(arr: [double], length: int, value: double, epsilon: double) -> bool {
    var i = 0
    while i < length {
        let diff = arr[i] - value
        let absDiff = diff < 0.0 ? -diff : diff
        if absDiff < epsilon {
            return true
        }
        i = i + 1
    }
    return false
}

// Find index of first occurrence of value, returns -1 if not found
fn indexOfInt(arr: [int], length: int, value: int) -> int {
    var i = 0
    while i < length {
        if arr[i] == value {
            return i
        }
        i = i + 1
    }
    return -1
}

// Count occurrences of a value in array
fn countInt(arr: [int], length: int, value: int) -> int {
    var count = 0
    var i = 0
    while i < length {
        if arr[i] == value {
            count = count + 1
        }
        i = i + 1
    }
    return count
}

// Simple bubble sort for integers (for small arrays)
fn bubbleSortInt(arr: [int], length: int) -> void {
    var i = 0
    while i < length - 1 {
        var j = 0
        while j < length - i - 1 {
            if arr[j] > arr[j + 1] {
                let temp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = temp
            }
            j = j + 1
        }
        i = i + 1
    }
}

// Simple bubble sort for doubles
fn bubbleSortDouble(arr: [double], length: int) -> void {
    var i = 0
    while i < length - 1 {
        var j = 0
        while j < length - i - 1 {
            if arr[j] > arr[j + 1] {
                let temp = arr[j]
                arr[j] = arr[j + 1]
                arr[j + 1] = temp
            }
            j = j + 1
        }
        i = i + 1
    }
}

// Check if integer array is sorted
fn isSortedInt(arr: [int], length: int) -> bool {
    var i = 0
    while i < length - 1 {
        if arr[i] > arr[i + 1] {
            return false
        }
        i = i + 1
    }
    return true
}

// Check if double array is sorted
fn isSortedDouble(arr: [double], length: int) -> bool {
    var i = 0
    while i < length - 1 {
        if arr[i] > arr[i + 1] {
            return false
        }
        i = i + 1
    }
    return true
}

// Binary search in sorted integer array (returns index or -1)
fn binarySearchInt(arr: [int], length: int, target: int) -> int {
    var left = 0
    var right = length - 1
    
    while left <= right {
        let mid = (left + right) / 2
        let midVal = arr[mid]
        
        if midVal == target {
            return mid
        } else {
            if midVal < target {
                left = mid + 1
            } else {
                right = mid - 1
            }
        }
    }
    
    return -1  // Not found
}

// Fill an integer array with a value
fn fillInt(arr: [int], length: int, value: int) -> void {
    var i = 0
    while i < length {
        arr[i] = value
        i = i + 1
    }
}

// Fill a double array with a value
fn fillDouble(arr: [double], length: int, value: double) -> void {
    var i = 0
    while i < length {
        arr[i] = value
        i = i + 1
    }
}

// Copy an integer array
fn copyIntArray(source: [int], dest: [int], length: int) -> void {
    var i = 0
    while i < length {
        dest[i] = source[i]
        i = i + 1
    }
}

// Copy a double array
fn copyDoubleArray(source: [double], dest: [double], length: int) -> void {
    var i = 0
    while i < length {
        dest[i] = source[i]
        i = i + 1
    }
}


