// AuroraLang Standard Library - Type Conversion Utilities
// Functions for converting between types

// Convert boolean to integer (false = 0, true = 1)
fn boolToInt(value: bool) -> int {
    if value {
        return 1
    }
    return 0
}

// Convert integer to boolean (0 = false, non-zero = true)
fn intToBool(value: int) -> bool {
    return value != 0
}

// Convert double to integer (truncation)
fn doubleToInt(value: double) -> int {
    return value
}

// Convert integer to double
fn intToDouble(value: int) -> double {
    return value
}

// Round double to integer
fn roundToInt(value: double) -> int {
    if value >= 0.0 {
        return value + 0.5
    }
    return value - 0.5
}

// Floor double to integer
fn floorToInt(value: double) -> int {
    let intValue = value
    if value < 0.0 && intValue != value {
        return intValue - 1
    }
    return intValue
}

// Ceiling double to integer
fn ceilToInt(value: double) -> int {
    let intValue = value
    if value > 0.0 && intValue != value {
        return intValue + 1
    }
    return intValue
}

// Parse binary digit (0 or 1) to integer
fn parseBinaryDigit(c: int) -> int {
    if c == 48 {  // '0'
        return 0
    }
    if c == 49 {  // '1'
        return 1
    }
    return -1  // Invalid
}

// Parse hex digit to integer (0-15)
fn parseHexDigit(c: int) -> int {
    if c >= 48 && c <= 57 {  // '0'-'9'
        return c - 48
    }
    if c >= 65 && c <= 70 {  // 'A'-'F'
        return c - 65 + 10
    }
    if c >= 97 && c <= 102 {  // 'a'-'f'
        return c - 97 + 10
    }
    return -1  // Invalid
}

// Convert integer to hex digit character code
fn intToHexDigit(value: int) -> int {
    if value >= 0 && value <= 9 {
        return value + 48  // '0'-'9'
    }
    if value >= 10 && value <= 15 {
        return value - 10 + 65  // 'A'-'F'
    }
    return 63  // '?' for invalid
}


