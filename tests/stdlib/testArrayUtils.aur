// Test stdlib array utility functions
// Note: stdlib is auto-imported, no need for manual import

fn main() -> int {
    // Create test array
    let arr = [5, 2, 8, 1, 9, 3]
    let len = 6
    
    // Test min and max
    printd(minIntArray(arr, len))    // 1
    printd(maxIntArray(arr, len))    // 9
    
    // Test sum and average
    printd(sumIntArray(arr, len))    // 28
    printd(averageIntArray(arr, len)) // 4.666...
    
    // Test contains
    printd(containsInt(arr, len, 8))  // 1 (true)
    printd(containsInt(arr, len, 10)) // 0 (false)
    
    // Test indexOf
    printd(indexOfInt(arr, len, 8))  // 2
    printd(indexOfInt(arr, len, 10)) // -1
    
    // Test count
    let arr2 = [1, 2, 3, 2, 4, 2]
    printd(countInt(arr2, 6, 2))      // 3
    printd(countInt(arr2, 6, 5))      // 0
    
    // Test isSorted
    let sortedArr = [1, 2, 3, 4, 5]
    printd(isSortedInt(sortedArr, 5))  // 1 (true)
    printd(isSortedInt(arr, len))       // 0 (false)
    
    // Test bubbleSort
    let arr3 = [5, 2, 8, 1, 9]
    bubbleSortInt(arr3, 5)
    printd(arr3[0])  // 1
    printd(arr3[1])  // 2
    printd(arr3[2])  // 5
    printd(arr3[3])  // 8
    printd(arr3[4])  // 9
    
    // Test reverse
    let arr4 = [1, 2, 3, 4, 5]
    reverseIntArray(arr4, 5)
    printd(arr4[0])  // 5
    printd(arr4[1])  // 4
    printd(arr4[2])  // 3
    printd(arr4[3])  // 2
    printd(arr4[4])  // 1
    
    // Test binary search (on sorted array)
    let sorted = [1, 3, 5, 7, 9, 11, 13]
    printd(binarySearchInt(sorted, 7, 7))   // 3
    printd(binarySearchInt(sorted, 7, 1))   // 0
    printd(binarySearchInt(sorted, 7, 13))  // 6
    printd(binarySearchInt(sorted, 7, 10))  // -1
    
    // Test fill
    let arr5 = [0, 0, 0, 0, 0]
    fillInt(arr5, 5, 42)
    printd(arr5[0])  // 42
    printd(arr5[4])  // 42
    
    return 0
}

